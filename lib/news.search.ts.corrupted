import { MilvusClient } from "@zilliz/milvus2-sdk-node";
import OpenAI from "openai";

const EMBED = "text-embedding-3-small";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

const FINAL_K = parseInt(process.env.NEWS_FINAL_K || "12", 10);
const RECALL_K = parseInt(process.env.NEWS_TOPK || "48", 10);

function client() {
  return new MilvusClient({
    address: process.env.MILVUS_ADDRESS || "",
    ssl: (process.env.MILVUS_SSL || "false") === "true",
    username: process.env.MILVUS_USERNAME || "",
    password: process.env.MILVUS_PASSWORD || "",
  });
}

function domainOf(url?: string) {
  try { 
    return new URL(url || "").hostname.replace(/^www\./, ""); 
  } catch { 
    return ""; 
  }
}

function recencyWeight(iso?: string) {
  if (!iso) return 0.7;
  const days = Math.max(0, (Date.now() - Date.parse(iso)) / 86400000);
  return Math.exp(-days / 14);
}

export async function searchAndRerankNewsStrict(symbol: string, userQuery: string, sinceIso: string) {
  console.log(`üîç News Search Debug - Symbol: ${symbol}, Query: ${userQuery}, Since: ${sinceIso}`);
  const coll = process.env.MILVUS_COLLECTION_NEWS || "polygon_news_data";
  const c = client();

  try {
    const list = await c.showCollections();
    console.log(`üîç Debug - Milvus showCollections response:`, JSON.stringify(list, null, 2));
    console.log(`üîç Debug - Available collections:`, list.collection_names || []);
    console.log(`üîç Debug - Looking for collection:`, coll);
    const names = list.collection_names || [];
    if (!names.includes(coll)) {
      console.log(`üîç News Search Debug - Collection found, proceeding with vector search...`);
      console.warn(`Milvus collection '${coll}' not found. Returning empty news results.`); return [];
    }

        console.log(`üîç News Search Debug - Creating embedding for: ${symbol} ${userQuery}`);
    const vec = await openai.embeddings.create({ 
      model: EMBED, 
      input: `${symbol} ${userQuery}` 
    });
    const qv = vec.data[0].embedding as number[];

    const desc = await c.describeCollection({ collection_name: coll });
    const fields = (desc.schema?.fields || []).map((f: any) => f.name);
    const hasTicker = fields.includes("ticker");
    const hasDate = fields.includes("published_utc");

    const filter = [
      hasTicker ? `ticker in ["${symbol.toUpperCase()}"]` : "",
      hasDate ? `published_utc >= "${sinceIso}"` : ""
    ].filter(Boolean).join(" && ") || undefined;

        console.log(`üîç News Search Debug - Searching Milvus with vector...`);
        console.log(`üîç News Search Debug - Searching Milvus with vector...`);
    const res = await c.search({
      collection_name: coll,
      vector: [qv],
      output_fields: ["text", "url", "published_utc", "ticker", "source", "title"],
      metric_type: "COSINE",
      limit: RECALL_K,
      filter,
      params: { ef: 128 }
    });

    });


    const hits: any[] = [];
    for (const g of (res.results || [])) {
      const rows = g.fields_data || [];
      const scores = g.scores || [];
      for (let i = 0; i < scores.length; i++) {
        const r: any = rows[i] || {};
        const get = (k: string) => r?.[k]?.Data?.[0] ?? r?.[k];
        hits.push({
          text: String(get("text") || ""),
          url: String(get("url") || ""),
          published_utc: String(get("published_utc") || ""),
          ticker: String(get("ticker") || ""),
          source: String(get("source") || ""),
          title: String(get("title") || ""),
          score: scores[i],
          dom: ""
        });
      }
    }
    
    if (hits.length === 0) {
      console.warn(`No news found in '${coll}' for ${symbol} since ${sinceIso}.`); return [];
    }

    // Rerank: cosine * recency * ticker match * domain quality; dedupe by url/domain
    const GOOD = new Set([
      "reuters.com", "bloomberg.com", "ft.com", "wsj.com", 
      "cnbc.com", "seekingalpha.com", "yahoo.com", "marketwatch.com"
    ]);
    
    const enriched = hits.map(h => {
      const dom = domainOf(h.url);
      const wRec = recencyWeight(h.published_utc);
      const wSym = (h.ticker || "").toUpperCase() === symbol.toUpperCase() ? 1.05 : 1.0;
      const wDom = dom && GOOD.has(dom) ? 1.05 : 1.0;
      return { ...h, dom, scoreRe: (h.score || 0) * wRec * wSym * wDom };
    }).sort((a, b) => b.scoreRe - a.scoreRe);

    const seenUrl = new Set<string>();
    const seenDom = new Map<string, number>();
    const result: any[] = [];
    
    for (const h of enriched) {
      if (h.url && seenUrl.has(h.url)) continue;
      const dc = seenDom.get(h.dom) || 0;
      if (dc >= 3) continue;
      seenUrl.add(h.url);
      seenDom.set(h.dom, dc + 1);
      result.push(h);
      if (result.length >= FINAL_K) break;
    }
    
    return result;
  } catch (error) {
    console.error("Milvus search error:", error);
    throw error;
  }
}
